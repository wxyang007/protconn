# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# a1country_draft.py
# Created on: 2019-10-29 09:14:57.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: GIS processing for Country-ProtCoon (part 1#2)
# ---------------------------------------------------------------------------

# Import arcpy module
import sys
import arcpy
from arcpy import env
import os
import os.path

# Redirect output to log file
log = open("Z:/globes/USERS/GIACOMO/protconn/logs/a1_country.log", "a")
sys.stdout = log

from datetime import datetime
firststarttime=datetime.now()

print(" ")
print("PROCEDURE STARTED at ", datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
print('-------------------------------------------------------')

# Set environment variables
arcpy.env.overwriteOutput = True

# Local variables:
# Input layers
wdpa_poly_input = "Y:/Original_Datasets/wdpa/uncompressed/wdpa_Jun2020_Public.gdb/WDPA_poly_Jun2020"
wdpa_point_input = "Y:/Original_Datasets/wdpa/uncompressed/wdpa_Jun2020_Public.gdb/WDPA_point_Jun2020"

# Output Geodatabase
outgdb_name="ProtConn_Jun2020.gdb"
outgdb_fullpath = "Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Jun2020.gdb"
#Out_path
outpath="Z:/globes/USERS/GIACOMO/protconn/data"

# Output layers
wdpa_poly_relevant = outgdb_fullpath+"/wdpa_poly_relevant"
wdpa_point_relevant = outgdb_fullpath+"/wdpa_point_relevant"
wdpa_point_relevant_Layer_LYR = "wdpa_point_relevant_Layer"
wdpa_point_relevant_with_joined_count_multiparts = wdpa_point_relevant_Layer_LYR
wdpa_point_relevant_singleparted = outgdb_fullpath+"/wdpa_point_relevant_singleparted"
sum_cte = outgdb_fullpath+"/sum_cte"
wdpa_point_relevant_with_joined_count_multiparts_buffered = outgdb_fullpath+"/wdpa_point_relevant_with_joined_count_multiparts_buffered"
wdpa_all_relevant = "wdpa_all_relevant"
wdpa_all_relevant_fullpath = outgdb_fullpath+"/"+wdpa_all_relevant


# Process: Create GDB 
if arcpy.Exists(outgdb_fullpath):
	print(outgdb_name, " already exists.")
else:
	arcpy.CreateFileGDB_management(outpath, outgdb_name)
	print(outgdb_name, " created")

# Process: Select relevant polygons
arcpy.Select_analysis(wdpa_poly_input, wdpa_poly_relevant, "STATUS <> 'Proposed' AND STATUS <> 'Not Reported' AND DESIG_ENG <> 'UNESCO-MAB Biosphere Reserve'")

# Process: Select relevant points
arcpy.Select_analysis(wdpa_point_input, wdpa_point_relevant, "STATUS <> 'Proposed' AND STATUS <> 'Not Reported' AND DESIG_ENG <> 'UNESCO-MAB Biosphere Reserve' AND REP_AREA >0")
print("Relevant points and polygons selected")
     
# Process: Add Field Areapart
arcpy.AddField_management(wdpa_point_relevant, "Areapart", "FLOAT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Make Feature Layer
arcpy.MakeFeatureLayer_management(wdpa_point_relevant, wdpa_point_relevant_Layer_LYR, "", "", "OBJECTID OBJECTID VISIBLE NONE;Shape Shape VISIBLE NONE;wdpaID wdpaID VISIBLE NONE;wdpa_PID wdpa_PID VISIBLE NONE;PA_DEF PA_DEF VISIBLE NONE;NAME NAME VISIBLE NONE;ORIG_NAME ORIG_NAME VISIBLE NONE;DESIG DESIG VISIBLE NONE;DESIG_ENG DESIG_ENG VISIBLE NONE;DESIG_TYPE DESIG_TYPE VISIBLE NONE;IUCN_CAT IUCN_CAT VISIBLE NONE;INT_CRIT INT_CRIT VISIBLE NONE;MARINE MARINE VISIBLE NONE;REP_M_AREA REP_M_AREA VISIBLE NONE;REP_AREA REP_AREA VISIBLE NONE;NO_TAKE NO_TAKE VISIBLE NONE;NO_TK_AREA NO_TK_AREA VISIBLE NONE;STATUS STATUS VISIBLE NONE;STATUS_YR STATUS_YR VISIBLE NONE;GOV_TYPE GOV_TYPE VISIBLE NONE;OWN_TYPE OWN_TYPE VISIBLE NONE;MANG_AUTH MANG_AUTH VISIBLE NONE;MANG_PLAN MANG_PLAN VISIBLE NONE;VERIF VERIF VISIBLE NONE;METADATAID METADATAID VISIBLE NONE;SUB_LOC SUB_LOC VISIBLE NONE;PARENT_ISO3 PARENT_ISO3 VISIBLE NONE;ISO3 ISO3 VISIBLE NONE;RESTRICT RESTRICT VISIBLE NONE;Areapart Areapart VISIBLE NONE")

# Process: Multipart To Singlepart
arcpy.MultipartToSinglepart_management(wdpa_point_relevant, wdpa_point_relevant_singleparted)

# Process: Summary Statistics
arcpy.Statistics_analysis(wdpa_point_relevant_singleparted, sum_cte, "wdpaID COUNT", "wdpaID")

# Process: Add Join
arcpy.AddJoin_management(wdpa_point_relevant_Layer_LYR, "wdpaID", sum_cte, "wdpaID", "KEEP_ALL")

# Process: Calculate Field Areapart
arcpy.CalculateField_management(wdpa_point_relevant_with_joined_count_multiparts, "Areapart", "!wdpa_point_relevant.REP_AREA! / !sum_cte.FREQUENCY!", "PYTHON_9.3", "")

# Process: Remove Join
arcpy.RemoveJoin_management(wdpa_point_relevant_with_joined_count_multiparts, "sum_cte")

# Process: Add Field radius_m
arcpy.AddField_management(wdpa_point_relevant_with_joined_count_multiparts, "radius_m", "FLOAT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Calculate Field
arcpy.CalculateField_management(wdpa_point_relevant_with_joined_count_multiparts, "radius_m", "math.sqrt( !Areapart!*1000000/math.pi )", "PYTHON_9.3", "")

# Process: Buffer
arcpy.Buffer_analysis(wdpa_point_relevant, wdpa_point_relevant_with_joined_count_multiparts_buffered, "radius_m", "FULL", "ROUND", "NONE", "", "PLANAR")
print("Points bufferized")

# Process: Merge
arcpy.Merge_management([wdpa_poly_relevant,wdpa_point_relevant_with_joined_count_multiparts_buffered],wdpa_all_relevant_fullpath)
print("Points and polygons merged")

# Process: Repair Geometry
arcpy.RepairGeometry_management(wdpa_all_relevant_fullpath, "DELETE_NULL")
print("Geometries repaired")

# Process: Copy Features to shapefile (NO MORE NEEDED: NOW THE LAYER IS IMPORTED IN POSTGIS DIRECTLY FROM GDB)
# arcpy.FeatureClassToFeatureClass_conversion(in_features=wdpa_all_relevant_fullpath, out_path=outpath, out_name=wdpa_all_relevant, config_keyword="")
# print("Features exported to shapefile")

print('-------------------------------------------------------')
endtime=datetime.now()
totaltime= endtime-firststarttime
print(' ')
print('PROCEDURE COMPLETED. Elapsed time: ', totaltime)
print('Now execute in docker the script "/globes/USERS/GIACOMO/protconn/scripts/gis_proc/exec_simplify_wdpa_all_relevant.sh" ')
print(' ')

log.close()
sys.exit()

# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# a2country_draft.py
# Created on: 2019-10-29 13:46:02.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import sys
import arcpy
from arcpy import env
import os
import os.path

# Redirect output to log file
log = open("Z:/globes/USERS/GIACOMO/protconn/logs/b2_country_boundcorr.log", "a")
sys.stdout = log

from datetime import datetime
firststarttime=datetime.now()

print(" ")
print("PROCEDURE STARTED at ", datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
print('-------------------------------------------------------')

# Set environment variables
arcpy.env.workspace = "Z:/globes/USERS/GIACOMO/protconn/data/"
arcpy.env.overwriteOutput = True

# Output Geodatabase
outgdb_name="ProtConn_Jun2020.gdb"
outgdb_fullpath = "Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Jun2020.gdb/"
#Out_path
outpath="Z:/globes/USERS/GIACOMO/protconn/data/"

# Local variables:
gaul_singleparted_shape_simpl="gaul_singleparted_shape_simpl"
input_shp = outpath+gaul_singleparted_shape_simpl+".shp"
gaul_singleparted_shape_simpl_full_path = outgdb_fullpath+gaul_singleparted_shape_simpl
wdpa_flat_1km2_final = outgdb_fullpath+"wdpa_flat_1km_final"
Merge_WDPA_flat_land = outgdb_fullpath+"Merge_WDPA_flat_1km2_final_with_land_patches"
Merge_WDPA_flat_land_lyr = "Merge_WDPA_flat_1km2_final_with_land_patches_lyr"
Merge_WDPA_flat_land_lyr2 = "Merge_WDPA_flat_1km2_final_with_land_patches_lyr2"
WDPA_plus_LAND_flat_1km2_final = outgdb_fullpath+"wdpa_plus_land_flat_1km_final"
out_shp="wdpa_plus_land_flat_1km_final.shp"
outfile_attr="attrib_table_WDPA_plus_LAND_jun2020_flat_1km2_final.txt"
all_distances_wdpa_plus_land100km = "all_distances_wdpa_plus_land100km_jun2020"
all_distances_wdpa_plus_land100km_fullpath = outgdb_fullpath+all_distances_wdpa_plus_land100km
outfile_dist=outpath+all_distances_wdpa_plus_land100km+".txt"

# Process: Feature Class to Feature Class
arcpy.FeatureClassToFeatureClass_conversion(input_shp, outgdb_fullpath, gaul_singleparted_shape_simpl, "", "", "")
print("gaul_singleparted_shape_simpl imported")

# Process: Define Projection
arcpy.DefineProjection_management(gaul_singleparted_shape_simpl_full_path, "GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]]")

# Process: Repair Geometry
arcpy.RepairGeometry_management(gaul_singleparted_shape_simpl_full_path, "DELETE_NULL")
print("Geometries repaired")

# Process: Add Geometry Attributes
arcpy.AddGeometryAttributes_management(gaul_singleparted_shape_simpl_full_path, "AREA_GEODESIC", "", "SQUARE_KILOMETERS", "GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]]")
print("Geodesic area computed")

# Process: Add Field nodeID
arcpy.AddField_management(gaul_singleparted_shape_simpl_full_path, "nodeID", "LONG", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Add Field ISO3final
arcpy.AddField_management(gaul_singleparted_shape_simpl_full_path, "ISO3final", "TEXT", "", "", "50", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Calculate Field nodeID
arcpy.CalculateField_management(gaul_singleparted_shape_simpl_full_path, "nodeID", "!OBJECTID! +1+100000", "PYTHON_9.3", "")

# Process: Calculate Field ISO3final
arcpy.CalculateField_management(gaul_singleparted_shape_simpl_full_path, "ISO3final", "!iso3!", "PYTHON_9.3", "")
print("Additional fields added and calculated")

# Process: Merge
# arcpy.Merge_management("Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/gaul_singleparted_shape_simpl;Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/wdpa_flat_1km2_final", Merge_WDPA_flat_land, "objectid \"objectid\" true true false 9 Long 0 9 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/gaul_singleparted_shape_simpl,objectid,-1,-1;id_object \"id_object\" true true false 9 Long 0 9 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/gaul_singleparted_shape_simpl,id_object,-1,-1;id_country \"id_country\" true true false 9 Long 0 9 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/gaul_singleparted_shape_simpl,id_country,-1,-1;name_iso31 \"name_iso31\" true true false 254 Text 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/gaul_singleparted_shape_simpl,name_iso31,-1,-1;iso3 \"iso3\" true true false 254 Text 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/gaul_singleparted_shape_simpl,iso3,-1,-1;orig_fid \"orig_fid\" true true false 9 Long 0 9 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/gaul_singleparted_shape_simpl,orig_fid,-1,-1,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/wdpa_flat_1km2_final,ORIG_FID,-1,-1;AREA_GEO \"AREA_GEO\" true true false 3407925 Double 57 3670065 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/gaul_singleparted_shape_simpl,AREA_GEO,-1,-1,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/wdpa_flat_1km2_final,AREA_GEO,-1,-1;nodeID \"nodeID\" true true false 0 Long 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/gaul_singleparted_shape_simpl,nodeID,-1,-1,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/wdpa_flat_1km2_final,nodeID,-1,-1;ISO3final \"ISO3final\" true true false 50 Text 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/gaul_singleparted_shape_simpl,ISO3final,-1,-1,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/wdpa_flat_1km2_final,ISO3final,-1,-1;Shape_Length \"Shape_Length\" false true true 8 Double 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/wdpa_flat_1km2_final,Shape_Length,-1,-1;Shape_Area \"Shape_Area\" false true true 8 Double 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/wdpa_flat_1km2_final,Shape_Area,-1,-1")
arcpy.Merge_management([gaul_singleparted_shape_simpl_full_path,wdpa_flat_1km2_final], Merge_WDPA_flat_land)
print("Gaul and wdpa_flat merged")

# Process: Make Feature Layer
arcpy.MakeFeatureLayer_management(Merge_WDPA_flat_land, Merge_WDPA_flat_land_lyr, "\"nodeID\" >100000", "", "OBJECTID_1 OBJECTID_1 VISIBLE NONE;Shape Shape VISIBLE NONE;objectid objectid VISIBLE NONE;id_object id_object VISIBLE NONE;id_country id_country VISIBLE NONE;name_iso31 name_iso31 VISIBLE NONE;sovereign_ sovereign_ VISIBLE NONE;sovereig_1 sovereig_1 VISIBLE NONE;sovereig_2 sovereig_2 VISIBLE NONE;iso3 iso3 VISIBLE NONE;iso2 iso2 VISIBLE NONE;un_m49 un_m49 VISIBLE NONE;source source VISIBLE NONE;status status VISIBLE NONE;original_d original_d VISIBLE NONE;original_n original_n VISIBLE NONE;source_cod source_cod VISIBLE NONE;sqkm sqkm VISIBLE NONE;orig_fid orig_fid VISIBLE NONE;AREA_GEO AREA_GEO VISIBLE NONE;cte0 cte0 VISIBLE NONE;nodeID nodeID VISIBLE NONE;ISO3final ISO3final VISIBLE NONE;Shape_Length Shape_Length VISIBLE NONE;Shape_Area Shape_Area VISIBLE NONE")

# Process: Calculate Field AREA_GEO=0
arcpy.CalculateField_management(Merge_WDPA_flat_land_lyr, "AREA_GEO", "0", "PYTHON_9.3", "")
print("Area_geo set to 0 for features coming from gaul (nodeid>100000)")

# Process: Repair Geometry (2)
arcpy.RepairGeometry_management(Merge_WDPA_flat_land, "DELETE_NULL")
print("Geometries repaired, once again...")

# Process: Delete Field
arcpy.DeleteField_management(Merge_WDPA_flat_land, "id_object;id_country;name_iso31;sovereign_;sovereig_1;sovereig_2;iso3;iso2;un_m49;source;status;original_d;original_n;source_cod;sqkm;orig_fid;cte0")
print("Useless fields deleted")

# Process: Make Feature Layer 2
arcpy.MakeFeatureLayer_management(Merge_WDPA_flat_land, Merge_WDPA_flat_land_lyr2,"\"ISO3final\" LIKE '%|%'", field_info="OBJECTID_1 OBJECTID_1 VISIBLE NONE;Shape Shape VISIBLE NONE;objectid objectid VISIBLE NONE;AREA_GEO AREA_GEO VISIBLE NONE;nodeID nodeID VISIBLE NONE;ISO3final ISO3final VISIBLE NONE;Shape_Length Shape_Length VISIBLE NONE;Shape_Area Shape_Area VISIBLE NONE")

# Process: Calculate Field ISO3final (assign 'DSP' to disputed territories)
arcpy.CalculateField_management(Merge_WDPA_flat_land_lyr2, "ISO3final", "'DSP'", "PYTHON_9.3", "")
print("Iso3 = DSP for multi-iso3 (disputed) objects")

# Process: Copy Features
arcpy.CopyFeatures_management(Merge_WDPA_flat_land, WDPA_plus_LAND_flat_1km2_final, "", "0", "0", "0")
print("Features copied to final layer")

# Process: Calculate Field objectid
arcpy.CalculateField_management(WDPA_plus_LAND_flat_1km2_final, field="objectid", expression="!OBJECTID_1!", expression_type="PYTHON_9.3", code_block="")
print("Field objectid updated")

# Process: Copy Features to shp (NO MORE NEEDED, gdb layer is imported directly in postgis)
# arcpy.FeatureClassToFeatureClass_conversion(in_features=WDPA_plus_LAND_flat_1km2_final, out_path=outpath, out_name=out_shp, where_clause="", field_mapping='objectid "objectid" true true false 4 Long 0 0 ,First,#,WDPA_plus_LAND_flat_1km2_final,objectid,-1,-1;AREA_GEO "AREA_GEO" true true false 8 Double 0 0 ,First,#,WDPA_plus_LAND_flat_1km2_final,AREA_GEO,-1,-1;nodeID "nodeID" true true false 4 Long 0 0 ,First,#,WDPA_plus_LAND_flat_1km2_final,nodeID,-1,-1;ISO3final "ISO3final" true true false 50 Text 0 0 ,First,#,WDPA_plus_LAND_flat_1km2_final,ISO3final,-1,-1;Shape_Leng "Shape_Leng" false true true 8 Double 0 0 ,First,#,WDPA_plus_LAND_flat_1km2_final,Shape_Length,-1,-1;Shape_Area "Shape_Area" false true true 8 Double 0 0 ,First,#,WDPA_plus_LAND_flat_1km2_final,Shape_Area,-1,-1', config_keyword="")
# print("wdpa_plus_land_flat_1km2_final exported in shapefile")

# # Table to table (txt) with field mapping
arcpy.TableToTable_conversion(in_rows=WDPA_plus_LAND_flat_1km2_final, out_path=arcpy.env.workspace, out_name=outfile_attr, field_mapping='OBJECTID "OBJECTID" true true false 4 Long 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/WDPA_plus_LAND_flat_1km2_final,objectid,-1,-1;ISO3final "ISO3final" true true false 50 Text 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/WDPA_plus_LAND_flat_1km2_final,ISO3final,-1,-1;AREA_GEO "AREA_GEO" true true false 8 Double 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/WDPA_plus_LAND_flat_1km2_final,AREA_GEO,-1,-1;nodeID "nodeID" true true false 4 Long 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/WDPA_plus_LAND_flat_1km2_final,nodeID,-1,-1;Shape_Leng "Shape_Leng" false true true 8 Double 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/WDPA_plus_LAND_flat_1km2_final,Shape_Length,-1,-1;Shape_Area "Shape_Area" false true true 8 Double 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/WDPA_plus_LAND_flat_1km2_final,Shape_Area,-1,-1')
print("Attribute Table exported in .txt")
print("First part of script completed at ", datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
print(' ')

# Process: Generate Near Table
print("Generating Near Table, please wait... about 1 day")
print("Meanwhile, you could execute in docker the script /globes/USERS/GIACOMO/protconn/scripts/exec_generate_near_table_country_boundcorr.sh")
print("The fastest script will get an award in nature.")

arcpy.GenerateNearTable_analysis(WDPA_plus_LAND_flat_1km2_final, WDPA_plus_LAND_flat_1km2_final, all_distances_wdpa_plus_land100km_fullpath, "100 Kilometers", "NO_LOCATION", "NO_ANGLE", "ALL", "", "GEODESIC")
print("Near Table generated in arcgis")

# Process: Copy Rows
arcpy.CopyRows_management(all_distances_wdpa_plus_land100km_fullpath, outfile_dist)
print("Near Table exported in .txt")

print('-------------------------------------------------------')
endtime=datetime.now()
totaltime= endtime-firststarttime
print(' ')
print('PROCEDURE COMPLETED. Elapsed time: ', totaltime)
print(' ')

log.close()
sys.exit()

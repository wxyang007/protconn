# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# a2country_draft.py
# Created on: 2019-10-29 13:46:02.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: GIS processing for Country-ProtCoon (part 2#2)
# ---------------------------------------------------------------------------

# Set the necessary product code
# import arcinfo


# Import arcpy module
import sys
import arcpy
from arcpy import env
import os
import os.path

from datetime import datetime
firststarttime=datetime.now()

print(" ")
print("PROCEDURE STARTED at ", datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
print('-------------------------------------------------------')

# Set environment variables
arcpy.env.workspace = "Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/"
arcpy.env.overwriteOutput = True

# Local variables:
input_shp = "Z:/globes/USERS/GIACOMO/protconn/data/wdpa_all_relevant_shape_simpl.shp"

# Output Geodatabase
outgdb = "Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/"
#Out_path
outpath="Z:/globes/USERS/GIACOMO/protconn/data"

wdpa_all_relevant_shape_simpl = outgdb+"wdpa_all_relevant_shape_simpl"
wdpa_all_relevant_shape_simpl_dissolved_ISO3 = outgdb+"wdpa_all_relevant_shape_simpl_dissolved_ISO3"
dissolved_iso3_over_1_km2 = outgdb+"dissolved_iso3_over_1_km2"
gaul = outgdb+"gaul"
wdpa_all_relevant_shape_simpl_dissolved_iso3_clipped_land = outgdb+"wdpa_all_relevant_shape_simpl_dissolved_iso3_clipped_land"
dissolved_iso3_clipped_land_over_1_km2 = outgdb+"dissolved_iso3_clipped_land_over_1_km2"
select_only_multi_iso3 = dissolved_iso3_clipped_land_over_1_km2
select_NO_multi_iso3 = dissolved_iso3_clipped_land_over_1_km2
wdpa_NO_multi_iso3 = outgdb+"wdpa NO multi iso3"
iso3_no_multi = outgdb+"iso3_no_multi"
iso3_multi = outgdb+"iso3_multi"
iso3_multi_erased = outgdb+"iso3_multi_erased"
intersected_gaul_erased = outgdb+"intersected_gaul_erased"
wdpa_only_multi_iso3 = outgdb+"wdpa only multi iso3"
wdpa_multi_iso3_together = outgdb+"wdpa_multi_iso3_together"
wdpa_multi_iso3_together_dissolved_ISO3final = outgdb+"wdpa_multi_iso3_together_dissolved_ISO3final"
wdpa_multi_iso3_together_dissolved_ISO3final_LYR = "wdpa_multi_iso3_together_dissolved_ISO3final_LYR"
wdpa_multi_iso3_together_dissolved_ISO3final_1km2 = outgdb+"wdpa_multi_iso3_together_dissolved_ISO3final_1km2"
wdpa_multi_iso3_together_dissolved_ISO3final_1km2_singleparted = outgdb+"wdpa_multi_iso3_together_dissolved_ISO3final_1km2_singleparted"
wdpa_flat_1km2_final = outgdb+"wdpa_flat_1km2_final"
All_distances_300km_Nov2019 = "All_distances_300km_Nov2019"
outfile_attr="Attrib_table_wdpa_flat_1km2_final_mar2020.txt"
outfile_dist="Z:/globes/USERS/GIACOMO/protconn/data/all_distances_300km_mar2020.txt"
wdpa_for_protconn_gpkg = "Z:/globes/USERS/GIACOMO/protconn/data/wdpa_for_protconn.gpkg"

# Process: Feature Class to Feature Class
arcpy.FeatureClassToFeatureClass_conversion(input_shp, outgdb, "wdpa_all_relevant_shape_simpl", "", "wdpaid \"wdpaid\" true true false 24 Double 15 23 ,First,#,Z:\\globes\\USERS\\GIACOMO\\protconn\\wdpa_all_relevant_shape_simpl.shp,wdpaid,-1,-1;iso3 \"iso3\" true true false 50 Text 0 0 ,First,#,Z:\\globes\\USERS\\GIACOMO\\protconn\\wdpa_all_relevant_shape_simpl.shp,iso3,-1,-1", "")

# Process: Define Projection
arcpy.DefineProjection_management(wdpa_all_relevant_shape_simpl, "GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]]")
print("Simplified features imported")

# Process: Repair Geometry (2)
arcpy.RepairGeometry_management(wdpa_all_relevant_shape_simpl, "DELETE_NULL")
print("Geometries repaired")

# Process: Dissolve
arcpy.Dissolve_management(wdpa_all_relevant_shape_simpl, wdpa_all_relevant_shape_simpl_dissolved_ISO3, "iso3", "", "SINGLE_PART", "DISSOLVE_LINES")
print("Features dissolved")

# Process: Repair Geometry
arcpy.RepairGeometry_management(wdpa_all_relevant_shape_simpl_dissolved_ISO3, "DELETE_NULL")
print("Geometries repaired")

# Process: Add Geometry Attributes
arcpy.AddGeometryAttributes_management(wdpa_all_relevant_shape_simpl_dissolved_ISO3, "AREA_GEODESIC", "", "SQUARE_KILOMETERS", "GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]]")
print("Area_geo computed")

# Process: Make Feature Layer over 1 km2
arcpy.MakeFeatureLayer_management(wdpa_all_relevant_shape_simpl_dissolved_ISO3, dissolved_iso3_over_1_km2, "\"AREA_GEO\" >=1", "", "iso3 iso3 VISIBLE NONE;AREA_GEO AREA_GEO VISIBLE NONE")

# Process: Clip
arcpy.Clip_analysis(dissolved_iso3_over_1_km2, gaul, wdpa_all_relevant_shape_simpl_dissolved_iso3_clipped_land, "")
print("Features clipped on gaul")

# Process: Add Geometry Attributes (2)
arcpy.AddGeometryAttributes_management(wdpa_all_relevant_shape_simpl_dissolved_iso3_clipped_land, "AREA_GEODESIC", "", "SQUARE_KILOMETERS", "GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]]")
print("Area_geo re-computed")

# Process: Make Feature Layer over 1 km2 (2)
arcpy.MakeFeatureLayer_management(wdpa_all_relevant_shape_simpl_dissolved_iso3_clipped_land, dissolved_iso3_clipped_land_over_1_km2, "\"AREA_GEO\" >=1", "", "iso3 iso3 VISIBLE NONE;AREA_GEO AREA_GEO VISIBLE NONE;Shape_length Shape_length VISIBLE NONE;Shape_area Shape_area VISIBLE NONE")

# Process: Select Layer By Attribute (2)
arcpy.SelectLayerByAttribute_management(dissolved_iso3_clipped_land_over_1_km2, "NEW_SELECTION", "iso3 NOT LIKE '%;%'")

# Process: Make Feature Layer NO multi iso3
arcpy.MakeFeatureLayer_management(select_NO_multi_iso3, wdpa_NO_multi_iso3, "", "", "iso3 iso3 VISIBLE NONE;AREA_GEO AREA_GEO VISIBLE NONE;Shape_length Shape_length VISIBLE NONE;Shape_area Shape_area VISIBLE NONE")

# Process: Copy Features NO multi iso3
arcpy.CopyFeatures_management(wdpa_NO_multi_iso3, iso3_no_multi, "", "0", "0", "0")
print("Feature class with only No-multi iso3 created")

# Process: Add Field myISO3
arcpy.AddField_management(iso3_no_multi, "myISO3", "TEXT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Calculate Field myISO3
arcpy.CalculateField_management(iso3_no_multi, "myISO3", "!iso3!", "PYTHON", "")
print("Features no-multi iso3 processed")

# Process: Select Layer By Attribute
arcpy.SelectLayerByAttribute_management(dissolved_iso3_clipped_land_over_1_km2, "NEW_SELECTION", "iso3 LIKE '%;%'")

# Process: Make Feature Layer only multi iso3
arcpy.MakeFeatureLayer_management(select_only_multi_iso3, wdpa_only_multi_iso3, "", "", "iso3 iso3 VISIBLE NONE;AREA_GEO AREA_GEO VISIBLE NONE;Shape_length Shape_length VISIBLE NONE;Shape_area Shape_area VISIBLE NONE")

# Process: Copy Features
arcpy.CopyFeatures_management(wdpa_only_multi_iso3, iso3_multi, "", "0", "0", "0")
print("Feature class with only multi iso3 created")

# Process: Erase
arcpy.Erase_analysis(iso3_multi, iso3_no_multi, iso3_multi_erased, "")

# Process: Intersect
arcpy.Intersect_analysis("Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/iso3_multi_erased #;Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/gaul #", intersected_gaul_erased, "ALL", "", "INPUT")
print("Multi iso3 erased and intersected with gaul")

# Process: Add Field myISO3 (2)
arcpy.AddField_management(intersected_gaul_erased, "myISO3", "TEXT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Calculate Field myISO3 (2)
arcpy.CalculateField_management(intersected_gaul_erased, "myISO3", "!iso3_1!", "PYTHON", "")

# Process: Merge
arcpy.Merge_management("Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/iso3_no_multi;Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/intersected_gaul_erased", wdpa_multi_iso3_together, "iso3 \"iso3\" true true false 50 Text 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/iso3_no_multi,iso3,-1,-1,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/intersected_gaul_erased,iso3,-1,-1;AREA_GEO \"AREA_GEO\" true true false 3014713 Double 98 6553703 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/iso3_no_multi,AREA_GEO,-1,-1,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/intersected_gaul_erased,AREA_GEO,-1,-1;myISO3 \"myISO3\" true true false 50 Text 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/iso3_no_multi,myISO3,-1,-1,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/intersected_gaul_erased,myISO3,-1,-1;FID_gaul \"FID_gaul\" true true false 0 Long 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/intersected_gaul_erased,FID_gaul,-1,-1;iso3_1 \"iso3_1\" true true false 254 Text 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/intersected_gaul_erased,iso3_1,-1,-1")
print("Features multi iso3 processed")

# Process: Add Field ISO3final (3)
arcpy.AddField_management(wdpa_multi_iso3_together, "ISO3final", "TEXT", "", "", "50", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Calculate Field myISO3 (3)
arcpy.CalculateField_management(wdpa_multi_iso3_together, "ISO3final", "!myISO3!", "PYTHON", "")

# Process: Dissolve by ISO3final
arcpy.Dissolve_management(wdpa_multi_iso3_together, wdpa_multi_iso3_together_dissolved_ISO3final, "ISO3final", "", "SINGLE_PART", "DISSOLVE_LINES")
print("Features dissolved")

# Process: Add Geometry Attributes (3)
arcpy.AddGeometryAttributes_management(wdpa_multi_iso3_together_dissolved_ISO3final, "AREA_GEODESIC", "", "SQUARE_KILOMETERS", "GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]]")

# Process: Make Feature Layer >=1 1km2
arcpy.MakeFeatureLayer_management(wdpa_multi_iso3_together_dissolved_ISO3final, wdpa_multi_iso3_together_dissolved_ISO3final_LYR, "\"AREA_GEO\" >=1", "", "ISO3final ISO3final VISIBLE NONE;AREA_GEO AREA_GEO VISIBLE NONE")
print("Geodesic area computed and features < 1km2 filtered out")

# Process: Copy Features NO multi iso3 (2)
arcpy.CopyFeatures_management(wdpa_multi_iso3_together_dissolved_ISO3final_LYR, wdpa_multi_iso3_together_dissolved_ISO3final_1km2, "", "0", "0", "0")

# Process: Repair Geometry (3)
arcpy.RepairGeometry_management(wdpa_multi_iso3_together_dissolved_ISO3final_1km2, "DELETE_NULL")
print("Geometry of multi-iso3 features repaired")

# Process: Multipart To Singlepart
arcpy.MultipartToSinglepart_management(wdpa_multi_iso3_together_dissolved_ISO3final_1km2, wdpa_multi_iso3_together_dissolved_ISO3final_1km2_singleparted)
print("multi-iso3 converted to single part")

# Process: Add Geometry Attributes (4)
arcpy.AddGeometryAttributes_management(wdpa_multi_iso3_together_dissolved_ISO3final_1km2_singleparted, "AREA_GEODESIC", "", "SQUARE_KILOMETERS", "GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]]")

# Process: Repair Geometry (4)
arcpy.RepairGeometry_management(wdpa_multi_iso3_together_dissolved_ISO3final_1km2_singleparted, "DELETE_NULL")
print("Geometries re-repaired for the nth time....")

# Process: Add Field nodeID
arcpy.AddField_management(wdpa_multi_iso3_together_dissolved_ISO3final_1km2_singleparted, "nodeID", "LONG", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Calculate Field
arcpy.CalculateField_management(wdpa_multi_iso3_together_dissolved_ISO3final_1km2_singleparted, "nodeID", "!OBJECTID!", "PYTHON", "")
print("Field nodeID computed")

# Process: Copy Features (2)
arcpy.CopyFeatures_management(wdpa_multi_iso3_together_dissolved_ISO3final_1km2_singleparted, wdpa_flat_1km2_final, "", "0", "0", "0")
print("Final layer copied to wdpa_flat_1km2_final")

# Table to table (txt) with field mapping (in alternative to copy rows)
arcpy.TableToTable_conversion(in_rows=wdpa_flat_1km2_final, out_path=outpath, out_name=outfile_attr,field_mapping='OBJECTID "nodeID" true true false 4 Long 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/wdpa_flat_1km2_final,nodeID,-1,-1;ISO3final "ISO3final" true true false 50 Text 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/wdpa_flat_1km2_final,ISO3final,-1,-1;AREA_GEO "AREA_GEO" true true false 8 Double 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/wdpa_flat_1km2_final,AREA_GEO,-1,-1;ORIG_FID "ORIG_FID" true true false 4 Long 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/wdpa_flat_1km2_final,ORIG_FID,-1,-1;Shape_Leng "Shape_Leng" false true true 8 Double 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/wdpa_flat_1km2_final,Shape_Length,-1,-1;Shape_Area "Shape_Area" false true true 8 Double 0 0 ,First,#,Z:/globes/USERS/GIACOMO/protconn/data/ProtConn_Mar2020.gdb/wdpa_flat_1km2_final,Shape_Area,-1,-1')
print("Attribute Table exported in .txt")

# Process: Copy Features to shapefile
arcpy.FeatureClassToFeatureClass_conversion(in_features=wdpa_flat_1km2_final, out_path=outpath, out_name=wdpa_flat_1km2_final, where_clause="", field_mapping='ISO3final "ISO3final" true true false 50 Text 0 0 ,First,#,wdpa_flat_1km2_final,ISO3final,-1,-1;AREA_GEO "AREA_GEO" true true false 8 Double 0 0 ,First,#,wdpa_flat_1km2_final,AREA_GEO,-1,-1;ORIG_FID "ORIG_FID" true true false 4 Long 0 0 ,First,#,wdpa_flat_1km2_final,ORIG_FID,-1,-1;nodeID "nodeID" true true false 4 Long 0 0 ,First,#,wdpa_flat_1km2_final,nodeID,-1,-1;Shape_Leng "Shape_Leng" false true true 8 Double 0 0 ,First,#,wdpa_flat_1km2_final,Shape_Length,-1,-1;Shape_Area "Shape_Area" false true true 8 Double 0 0 ,First,#,wdpa_flat_1km2_final,Shape_Area,-1,-1', config_keyword="")


print("wdpa_flat_1km2_final exported in Geopackage")

# Process: Generate Near Table (edit output name before running)
print("Now generating Near Table. If you want to do it in postgis, kill the script now and execute in docker the script /globes/USERS/GIACOMO/protconn/scripts/exec_generate_near_table_country.sh")
arcpy.GenerateNearTable_analysis(wdpa_flat_1km2_final, wdpa_flat_1km2_final, All_distances_300km_Nov2019, "300 Kilometers", "NO_LOCATION", "NO_ANGLE", "ALL", "0", "GEODESIC")
print("Near Table generated")

# Process: Copy Rows
arcpy.CopyRows_management(All_distances_300km_Nov2019, outfile_dist)
print("Near Table exported in .txt")

print('-------------------------------------------------------')
endtime=datetime.now()
totaltime= endtime-firststarttime
print(' ')
print('PROCEDURE COMPLETED. Elapsed time: ', totaltime)
print('If needed, now execute in docker the script "/globes/USERS/GIACOMO/protconn/scripts/gis_proc/exec_generate_near_table_country.sh" ')
print(' ')

sys.exit()
